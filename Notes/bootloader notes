
;*************************************
;FAT stuff
;*************************************

-ROOT ENTRY STUFF-

5354 4147 4532 2020 5359 5320 008a 044c
fd52 fd52 0000 044c fd52 0200 4100 0000

the 0200 part is the starting cluster because we start counting the first byte as 0. 
I think this value is stored as a little endian so its actually 2. 
2 points to the 2nd entry in the FAT (first two are reserved for some reason), 
and it also points to the first cluster in the data region. the 2nd entry in the 
FAT is fff which is the EOC (marks end of file), so we dont need to load any more clusters. 
this will change tho, because our 2nd stage bootloader will get bigger, meaning our 
FAT entry will point to more clusters that contain our 2nd stage.

;*************************************
;LBA and CHS stuff
;*************************************

Im going to relate the CHS addressing scheme to HMS (hours, minutes, seconds), 
so 24:60:60 is our disk geometry. 

first off, 

1 mod 10 = 1
2 mod 10 = 2
3 mod 10 = 3
...
11 mod 10 = 1
12 mod 10 = 2
13 mod 10 = 3
...

so, now that we know the modulo operater can be used for raparounds, 
lets get back to LBA and CHS conversions. 

lets say we have 3h,41m,26s (a CHS of 3,41,26). lets try and convert this to seconds (LBA).

3 * 60 * 60 = 10,800 <-- the amount of seconds in 3 hours
41 * 60 = 2,460 <-- the amount of seconds in 41 mins
26 = 26 <-- the last 26 seconds of our time (3,41,26)

now we add all these values to get the amount of seconds in 3hours, 41mins, 26secs. 
10,800 + 2,460 + 26 = 13,286 seconds (this is our LBA)

converting 13,286 seconds (our LBA) back to HMS (CHS)

to get the amount of seconds (3hours, 41mins, 26secs <--this) from 13,286 seconds, 
all we need to do is 13,286 mod 60. this is the same raparound logic as the mod 10 examples I showed above.

S = 13,286(LBA) mod 60(SPT) = 26

to get the amount of minutes (3hours, 41mins <-- this, 26secs) from 13,286 seconds, 
we need to do 13,286sec / 60 to convert 13,286 seconds to minutes. 
then we just do mod 60 so we get the mins. its the same principal as the seconds conversion, 
but we are just doing it with minutes.

M = (13,286(LBA) / 60(SPT)) mod 60(HPC) = 41

to get the hours from 13,286, all we have to do is divide it by sixty 
to convert 13,286 seconds to get 221 minutes. then we have to devide 221 by 60 because 
there are 60 minutes in an hour. so we end up getting 3. 

H = 13,286(LBA) / (60(HPC) * 60(SPT)) = 3

keep in mind all these answers are floored. Also, to avoind confusion, I specificly 
left out the - 1 on the sector conversion because it doesn't really relate to this time analogy. 
Becuase LBA starts counting from 0, and CHS doesn't, we have to subtract 1 from the sector equation. 
So the reall sector equation would look more like this,

S = (LBA mod SPT) - 1

the reason we only need to do it with the S equation is because it comes out whole in all the other ones. 
try if u dont beleive me, u wont. it just has to do with rounding.

LBA	=	(cluster - 2 ) * sectors per cluster

this equation i think is referring to the fact that the first 2 entries in the FAT are reserved. 
cluster is equal to the cluster we want to read data (in data region). 

;*************************************
;FAT ENTRYS stuff
;*************************************


10011011 10110011 10011011 10110011	10011011 10110011 10011011 10110011	
|     0     ||     1     | |     2     ||     3     | |     4     |

the reason we devide the cluster by 2, then add it with itself is because if we get say cluster 4, 
we dont load the fourth byte. instead we start loading from the (4/2 = 2, 2+4=6) 6th byte. 
this is essentially the same as multiplying by 3/2, which is the fat entry to byte ratio (12/8 = 3/2). 
since each FAT entry is 3/2 or 1.5 times bigger than a byte, all we got to do is multiply the cluster 
num by 1.5 to access the byte we start refrencing from.

;*************************************
;GDT (global descriptor table) and Pmode stuff
;*************************************

the GDT is a table with 8 byte entrys, that describe a section of memory.
The GDT starts with null descriptor, which is just an empt set of 8 bytes. 
Following the null descriptor, is the code descriptor and the Data descriptor.
I will explain what thes terms mean and the general structure of the GDT.

there are several pictures that give a good summary on the basic structure, so I will
link the images below.

good pics of the GDT:
http://ece-research.unm.edu/jimp/310/slides/micro_arch2-2.gif
https://wiki.osdev.org/images/f/f3/GDT_Entry.png

this is what each entry in the GDT would look like.
the Limit section (bits 0 - 15, and the last 3 bits 16 - 19) is describing 
how big this section of memory can be. the base section (bits 0-15, 16-23, and 24-31)
represents the base address of this section of memory. notice how different
parts of the base address and limit value are located in different areas of the entry? 
this is just a standard, and its just how intel wants it to be organized.

Now onto the Access rights. the access rights is just one byte, and all
it does is describe what kind of rights this segment of code has. for 
example, it can describe the segment as readabl or writable, whether it is
to executed as code or interpreted as data, ect. the first bit describes whether it uses
virtual memory not. the second bit describes whether its read only, or writable. 
the third bit is the expansion direction. The fourth bit tells the processer whether its a code or data
segment. The fifth bit describes whether its a system descriptor (0), or a code / data 
descriptor (1). the Sixth and seventh bit describe its privledge level (0-3). the lower
the privledge level, the more control over memory your in (bootloaderis at privledge level 
0). descriptors that describe portions of memory with higher levels of privledge would mean
that whatever is running there (some sort of user program), wouldn't have the same amount of 
over the system as the boot loader. for example, a user program wouldn't be able to just use
cli hlt to halt the entire system like we can in the bootloader. the last bit of the access
byte is whether the descriptor is undefined, or has a valid base a limit. it is used with 
virtual memory.

now comes the last byte.
Im just going to link to usefull reasources because I find it kind
of pointless to just describe it here whem I didnt have any trouble understanding it.

http://ece-research.unm.edu/jimp/310/slides/micro_arch2.html
http://ringzero.free.fr/os/protected%20mode/Pm/PM1.ASM

addressing is different now. in real mode, it used to be segment:offset, but now its
descriptor:offset. The segment registers (CS, DS, ES...)are now used to describe 
an index into the GDT. In the GDT, we have a bunch of 8 byte entrys describing 
portions on memory. so if we want to sepcify an address, all we need to do is
say for example 0x08:88. this will get the second entry of the GDT (code descriptor), and add
the offset with the base address. see image for a detailed look. remember each entry is 
8 bytes.

http://ece-research.unm.edu/jimp/310/slides/micro_arch2-1.gif

how does the cpu know where the GDT is? thats where the GDTR register come into play.
the gdtr holds the size and the location of the GDT. link for more info.

https://en.wikibooks.org/wiki/X86_Assembly/Global_Descriptor_Table

Switching into protected mode. the register CR0 contains the pe flag in bit 0
we or it with 00000001 to set the pe flag in eax, then put the valu of eax back into CR0

	mov 	eax, cr0						
	or 		eax, 1
	mov 	cr0, eax 

We are not yet in full protected mode! Section 10.3 of the INTEL
80386 PROGRAMMER'S REFERENCE MANUAL 1986 states:

Immediately after setting the PE flag, the initialization code must flush
the processor's instruction prefetch queue by executing a JMP instruction.
The 80386 fetches and decodes instructions and addresses before they are
used; however, after a change into protected mode, the prefetched
instruction information (which pertains to real-address mode) is no longer
valid. A JMP forces the processor to discard the invalid information.

It isn't really necessary to do the JMP right away, as this implies.
It simply means that protected mode doesn't "kick in" until the segment
registers are reloaded. Above, we set the ES segment register to 0xB800.
This is the real-mode segment of the text video memory. With the PE bit
still set, let's copy a message from the real-mode data segment (DS) to
the video memory (ES).


The code above won't work in protected mode. It's there just to
prove that setting the PE bit is not enough to enter protected mode.

Now do a far jump. This reloads the CS register and flushes the
real-mode instructions from the prefetch queue. CS is the segment
register used for instruction fetches, so this is where the switch
from 16-bit instructions (real-mode) to 32-bit instructions
(protected-mode) takes place.

But what goes into CS? In real mode, we use the segment address. In
protected mode, we use a SELECTOR:

MSB  b14  b13  b12  b11  b10   b9   b8   b7   b6   b5   b4   b3   b2   b1   LSB
;+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+
;|                                index                           | L  |   RPL   |
;+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+

index is a 13-bit index into the GDT. It selects one of the possible 8192
descriptors in the table. (Note: 8192 descriptors/table, 8 bytes/descriptor.
The GDT is no larger than 64K.)

;*************************************
;Enabling A20 Gate (stuff i had a hard time understanding)
;*************************************

setting m/io to high means you want to read from a memory location
setting m/io to low means you want to read from a io device (
keyboard controller, mouse controller, disk Controller, sound Controller, ...)

in = sets m/io line to low and read line in the control bus, and reads a value
from an io device. the io device it reads from is specified by the operand

out = sets m/io line to low and write line in the control bus, and writes a value
to an io device. the io device it reads from is specified by the operand

address lines above 20 are disbaled because we are in real mode. in order
to enable them we have to enable the A20 Gate. There are several ways
of doing so, but I need to explain some microchips.

the 8043 keyboard controller, or the ps2 controller, is one method of enabling
the A20. You might be wondering what a keyboard conroller has to do with a 
A20 Gate, but I'll explain. 

port numbers 0x60 and 0x64 correspond to registers on the ps2 controller.
if you read from port 0x64 (which would be preforming the operation in al, 0x64),
you would be reading the status register. if you write to 0x64 (out 0x64, al), 
you would be writing to a command register. the command register takes in a command
and preforms an actions acordingly. the incomplete list of commands is as follows,


0x20	Read Keyboard Controller Command Byte
0x60	Write Keyboard Controller Command Byte
0xAA	Self Test
0xAB	Interface Test
0xAD	Disable Keyboard
0xAE	Enable Keyboard
0xC0	Read Input Port
0xD0	Read Output Port
0xD1	Write Output Port
0xDD	Enable A20 Address Line
0xDF	Disable A20 Address Line
0xE0	Read Test Inputs
0xFE	System Reset
0xA7	Disable Mouse Port
0xA8	Enable Mouse Port
0xA9	Test Mouse Port
0xD4	Write to mouse

each bit in the status register means something, see bellow.

*Bit 0: Output Buffer Status
	*0: Output buffer empty, dont read yet
	*1: Output buffer full, please read me :)
*Bit 1: Input Buffer Status
	*0: Input buffer empty, can be written
	*1: Input buffer full, dont write yet
Bit 2: System flag
	0: Set after power on reset
	1: Set after successfull completion of the keyboard controllers self-test (Basic Assurance Test, BAT)
Bit 3: Command Data
	0: Last write to input buffer was data (via port 0x60)
	1: Last write to input buffer was a command (via port 0x64)
Bit 4: Keyboard Locked
	0: Locked
	1: Not locked
Bit 5: Auxiliary Output buffer full
	PS/2 Systems:
		0: Determins if read from port 0x60 is valid If valid, 0=Keyboard data
		1: Mouse data, only if you can read from port 0x60
	AT Systems:
		0: OK flag
		1: Timeout on transmission from keyboard controller to keyboard. This may indicate no keyboard is present.
Bit 6: Timeout
	0: OK flag
	1: Timeout
	PS/2:
		General Timeout
	AT:
		Timeout on transmission from keyboard to keyboard controller. Possibly parity error (In which case both bits 6 and 7 are set)
Bit 7: Parity error
	0: OK flag, no error
	1: Parity error with last byte

I put a star next to the ones that actually matter for now. 
i will go into the use case of this info later.

the 0x60 port is the data port for the ps2 controller. this port is used to receive or write data to the 
ps2 controller. depending on what you input into the command register, the 0x60 register will either output
data or input data. 

NOTE: bit 0 of the status register has to be set before attempting to read data from IO port 0x60
bit 1 of the status regisster must be clear before attempting to write data to IO port 0x60 or IO port 0x64

because the controller is slower that the code executing, we have to wait
for the controller before executing code. this is not hard to implement.

; wait for input buffer to be clear
; bit 1 must be clear before attempting to write data to IO port 0x60 or IO port 0x64

Wait_Input:
	in 		al, 0x64
	test 	al, 2 							; will set ZF to 1 if AND result is 0
	jnz 	Wait_Input 						; jumps if ZF is 0, returns if ZF is 1
	ret

; wait for output buffer to have data
; bit 0 must be set before attempting to read data from IO port 0x60

Wait_Output:
	in 		al, 0x64
	test 	al, 1 							; will set ZF to 1 if AND result is 0
	jz 		Wait_Output 					; jumps if ZF is 1, returns if ZF is 0
	ret

;*************************************
;Pmode functions (print)
;*************************************

lets say this is our screen:

* * * * *
* * * * *
* * * * *
* * * * *
* * * * *

each * represents a pixel. if we want to convert the x/y location to a
linear address (in memory because thats where the screen buffer is),
we use this simple calculation:

x + (y * screenwidth)

you could imagine each y location is each row of pixels(*). 

so lets see where (5,4) is on the screen

* * * * *
* * * * *
* * * * *
* * * * (*)
* * * * *

location (5, 4) is four rows down, and 5 pixels to the right.
I we wanted to conver this into a linear address, you would multiply 
the Y corrdinate (4) by the screen width, then add x. so it would be:

5 + (3 * 5) = 20

so we get twenty five. if we lay out our screen buffer like how its stored 
in memory, we get

* * * * * 	* * * * * 	* * * * * 	* * * * (*)		* * * * *

as you can see, the 20th pixel over is circled. the reason I multiplpy by
3 is because we start counting rows at 0. so by multiplying by the 
y * screenwidth, we get the start of the correct row, then we add
x as an offset. so lets do (3, 2).

* * * * *
* * (*) * *
* * * * *
* * * * *
* * * * *

3 + (1 * 5) = 8

* * * * * 	* * (*) * * 	* * * * * 	* * * * *	* * * * *

the reason we dont subtract the x by one is so we can index every pixel
in each row. we need to subtract the y by one beause we need to be at the
of the row were in.



